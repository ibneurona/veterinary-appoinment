{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCitas","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","handleOnChange","e","target","name","value","error","agergarError","onSubmit","preventDefault","trim","id","uuid","className","type","placeholder","onChange","Cita","eliminarCita","onClick","propType","PropTypes","func","isRequired","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","tituloCitas","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f80f55e2.chunk.js","sourcesContent":["import React,{useState, Fragment} from 'react';\nimport uuid from 'uuid/v4';\n\n\nconst Formulario = ({crearCitas}) => {\n  \n  //State de el componente\n  const [cita, actualizarCita] = useState({\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  });\n\n  //funcion que se ejecuta cada vez que escribe el usuario\n  const handleOnChange = (e) => {\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  //extraccion de valores de los inputs\n  const {mascota, propietario, fecha, hora, sintomas} = cita;\n\n  const [error,agergarError] = useState(false)\n\n  //Funcion para agregar citas\n  const agregaCita = (e) => {\n    e.preventDefault();\n\n    //validar\n    if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\n      agergarError(true)\n      return;\n    }\n\n    //Error cita\n    agergarError(false);\n\n    //asignaar un id\n    cita.id = uuid();\n    \n    //Crear cita\n    crearCitas(cita);\n    \n    //reiniciar inputs\n    actualizarCita({\n      mascota: \"\",\n      propietario: \"\",\n      fecha: \"\",\n      hora: \"\",\n      sintomas: \"\"\n    });\n\n  };\n\n  return (\n    <Fragment>\n      <h2>Crear Cita</h2>\n      <form onSubmit={agregaCita}>\n        {error ? <p className=\"alerta-error\">Todos los campos están vacíos</p> : null}\n        <label>Nombre Mascota</label>\n        <input\n          type = \"text\"\n          name = \"mascota\"\n          className = \"u-full-width\"\n          placeholder = \"Nombre Mascota\"\n          onChange = {handleOnChange}\n          value = {mascota}\n        />\n        <label>Nombre Dueño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre del Dueño \"\n          onChange={handleOnChange}\n          value = {propietario}\n        />\n        <label>Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={handleOnChange}\n          value = {fecha}\n        />\n        <label>Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={handleOnChange}\n          value = {hora}\n        />\n        <label>Síntomas</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"sintomas\"\n          onChange={handleOnChange}\n          value = {sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar Cita\n        </button>\n      </form>\n    </Fragment>\n  );\n}\n \nexport default Formulario;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\n\nconst Cita = ({ cita, eliminarCita }) => (\n  <div className=\"cita\">\n    <p>\n      Mascota:<span> {cita.mascota}</span>\n    </p>\n    <p>\n      Propietario:<span> {cita.propietario}</span>\n    </p>\n    <p>\n      Fecha:<span> {cita.fecha}</span>\n    </p>\n    <p>\n      Hora de la cita:<span> {cita.hora}</span>\n    </p>\n    <p>\n      Sintomas:<span> {cita.sintomas}</span>\n    </p>\n    <button\n      className = \"button eliminar u-full-width\"\n      onClick = {() => eliminarCita(cita.id)}\n    >Eliminar &times;</button>\n  </div>\n);\n\nCita.propTypes ={\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\n \nexport default Cita;","import React,{Fragment,useState,useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from \"./components/Cita\";\nimport PropTypes from 'prop-types';\n\n\nfunction App() {\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = []\n  }\n\n  const [citas, setCitas] = useState(citasIniciales);\n\n  //useEffect para cuando el estado cambia\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n  \n  //guarda las citas\n  const crearCitas = cita => {\n    setCitas([...citas, cita]);\n  }\n  \n  //funcion para eliminar cita\n  const eliminarCita = id => {\n\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas);\n  }\n\n  //Mensaje de condicional de citas\n  const tituloCitas = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'; \n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes Veterinarios</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCitas={crearCitas} />\n          </div>\n          <div className=\"one-half column\">\n            <h1>{tituloCitas}</h1>\n            {citas.map(cita => (\n              <Cita \n                key = {cita.id} \n                cita = {cita} \n                eliminarCita = {eliminarCita} \n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n//Documentado de componentes\nFormulario.propType = {\n  crearCitas: PropTypes.func.isRequired,\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}